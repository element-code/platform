variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "/certs"
    MYSQL_ROOT_PASSWORD: app
    WEB_DOCUMENT_ROOT: $CI_PROJECT_DIR/public
    GIT_STRATEGY: clone
    LOG_STDOUT: $CI_PROJECT_DIR/var/log/stdout.log
    MYSQL_CMD: mysqld
    PROJECT_ROOT: $CI_PROJECT_DIR
    ADMIN_PATH: $CI_PROJECT_DIR/src/Administration/Resources/app/administration
    STOREFRONT_PATH: $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront
    COMPOSER_PROCESS_TIMEOUT: 7200 # 60s * 60 * 2 = 2 hours

stages:
    - lint
    - unit
    - E2E
    - security
    - build
    - deploy
    - visual

include:
    -   local: .gitlab/ci/split.yml

workflow:
    rules:
        # do not run on push
        -   if: '$CI_PIPELINE_SOURCE == "push"'
            when: never
        -   when: always

default:
    image: shopware/development:7.4-composer-2
    timeout: 1h 00m
    interruptible: true
    before_script:
        - composer run setup
        - chown -R application:application .
        - /entrypoint supervisord > /dev/null 2>&1 &

Danger:
    stage: lint
    image:
        name: ghcr.io/shyim/danger-php:latest
        entrypoint: ["/bin/sh", "-c"]
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::all.*/'
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    before_script: []
    script:
        - danger ci

ESLint (Administration):
    stage: lint
    image: node:alpine
    before_script: []
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::all.*/'
        - changes:
              - 'src/Administration/Resources/app/administration/**/*'
    script:
        - cd src/Administration/Resources/app/administration
        - npm clean-install
        - npm run --silent lint -- --format junit --output-file $CI_PROJECT_DIR/eslint.junit.xml
    after_script:
        - grep 'failure message' eslint.junit.xml
    artifacts:
        when: on_failure
        paths:
            - eslint.junit.xml
        reports:
            junit: eslint.junit.xml

ESLint (Storefront):
    stage: lint
    image: node:alpine
    before_script: []
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::all.*/'
        - changes:
              - 'src/Storefront/Resources/app/storefront/**/*'
    script:
        - cd src/Storefront/Resources/app/storefront
        - npm clean-install
        - npm run --silent lint:js -- --format junit --output-file $CI_PROJECT_DIR/eslint.junit.xml
    after_script:
        - grep 'failure message' eslint.junit.xml
    artifacts:
        when: on_failure
        paths:
            - eslint.junit.xml
        reports:
            junit: eslint.junit.xml

Stylelint (Administration):
    stage: lint
    image: node:alpine
    before_script: []
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::all.*/'
        - changes:
              - 'src/Administration/Resources/app/administration/.stylelintrc'
              - 'src/Administration/Resources/app/administration/**/*.scss'
    script:
        - cd src/Administration/Resources/app/administration
        - npm clean-install
        - npm run lint:scss -- --custom-formatter 'node_modules/stylelint-junit-formatter' --output-file stylelint.junit.xml
    artifacts:
        reports:
            junit: src/Administration/Resources/app/administration/stylelint.junit.xml

Stylelint (Storefront):
    stage: lint
    image: node:alpine
    before_script: []
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::all.*/'
        - changes:
              - 'src/Storefront/Resources/app/storefront/stylelint.config.js'
              - 'src/Storefront/Resources/app/storefront/**/*.scss'
    script:
        - cd src/Storefront/Resources/app/storefront
        - npm clean-install
        - npm run lint:scss -- --custom-formatter 'node_modules/stylelint-junit-formatter' --output-file stylelint.junit.xml
    artifacts:
        reports:
            junit: src/Storefront/Resources/app/storefront/stylelint.junit.xml

PHP analysis:
    stage: lint
    image: shopware/development:7.4-composer-2
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*lint::all.*/'
        - changes:
            - phpstan.neon.dist
            - psalm.xml
            - 'changelog/**/*.md'
            - 'src/**/snippet/**/*.json'
            - '**/*.php'
    before_script:
        - composer install --quiet
    script:
        - composer run ecs -- src --no-progress-bar
        - composer run phpstan -- --error-format=gitlab --no-progress | tee phpstan-report.json
        - composer run psalm -- --threads=$(nproc) --show-info=false --no-progress
        - composer run lint:changelog
        - composer run lint:snippets
    artifacts:
        reports:
            codequality: phpstan-report.json

# stage: unit

PHP Full:
    image: $DEV_IMAGE
    stage: unit
    needs: []
    services:
        -   name: $MYSQL_IMAGE
            alias: database
            entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
        -   name: elasticsearch:7.8.0
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
        -   name: swaggerapi/swagger-validator-v2:v2.0.5
            alias: swagger
    variables:
        TEST_SUITES: "administration storefront checkout content framework profiling migration system elasticsearch"
        APP_ENV: test
    script:
        - FAILED=0
        - >
            for SUITE in $TEST_SUITES; do
                composer run phpunit -- --testsuite=$SUITE --log-junit phpunit.$SUITE.xml --colors=never || FAILED=1
            done
        - '[[ $FAILED -eq 0 ]]'
    artifacts:
        when: always
        paths:
            - phpunit.*.xml
            - var/log/*
        reports:
            junit: phpunit.*.xml
    rules:
      - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::skip.*/'
        when: never
      - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::all.*/'
      - changes:
          - "Migration*.php"
          - "**/Migration*.php"
          - "src/Core/Framework/Resources/config/packages/shopware.yaml"
      - if: '$SKIP_ON_MR != "true" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH =~ /^(trunk|6\..+)$/)'
        changes:
            - phpunit.xml.dist
            - '**/*.xml'
            - '**/*.yaml'
            - '**/*.twig'
            - '**/*.json'
            - '**/*.php'
    parallel:
        matrix:
            -   MYSQL_IMAGE: mariadb:10.4
                DEV_IMAGE: shopware/development:8.0-composer-2
                FEATURE_ALL: ["false", "minor"]
            -   MYSQL_IMAGE:
                    - mysql:5.7
                    - mariadb:10.3
                DEV_IMAGE: shopware/development:8.0-composer-2
                FEATURE_ALL: ["false", "minor", "major"]
                SKIP_ON_MR: 'true'
            -   MYSQL_IMAGE:
                    - mysql:8.0.19
                DEV_IMAGE: ["shopware/development:7.4-composer-2", "shopware/development:8.0-composer-2"]
                FEATURE_ALL: ["false", "minor", "major"]
                MYSQL_CMD: 'mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --sql-require-primary-key=ON'
                SKIP_ON_MR: 'true'

PHP coverage:
    # TODOS: replace with minimal image - development is 2GB big! An alpine based one should be around 100MB
    image: shopware/development:7.4-composer-2
    stage: unit
    needs: []
    services:
        -   name: mariadb:10.4
            alias: database
            entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
    variables:
        APP_ENV: "test"
        FEATURE_ALL: "major"
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::all.*/'
        - changes:
            - phpunit.xml.dist
            - '**/*.xml'
            - '**/*.yaml'
            - '**/*.twig'
            - '**/*.json'
            - '**/*.php'
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
          when: manual
          allow_failure: true
    before_script: []
    script:
        - composer install --optimize-autoloader
        - mkdir -p config/jwt || true
        - bin/console system:generate-jwt-secret
        - PHP_OPTIONS="-d pcov.enabled=1 -d pcov.directory=$PWD/src -d pcov.exclude='~(vendor|Test|node_modules)~'"
        - php $PHP_OPTIONS vendor/bin/phpunit
            --configuration phpunit.xml.dist
            --log-junit phpunit.junit.xml
            --exclude-group=skip-paratest,needsWebserver
            --testsuite "$TESTSUITE"
            --coverage-text
            --coverage-cobertura cobertura.xml
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
        when: always
        paths:
            - cobertura.xml
        reports:
            junit: phpunit.junit.xml
            cobertura: cobertura.xml
    parallel:
        matrix:
            - TESTSUITE: ["framework", "checkout", "content", "storefront,administration,system,elasticsearch,profiling", "migration"]

Jest (Administration):
    stage: unit
    needs: []
    services:
        -   name: mariadb:10.3
            alias: database
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::all.*/'
        - when: always
    variables:
        PROJECT_ROOT: $CI_PROJECT_DIR
    script:
        - bin/console framework:schema -s 'entity-schema' $ADMIN_PATH/test/_mocks_/entity-schema.json
        - npm --prefix $ADMIN_PATH run unit -- --silent
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        when: always
        paths:
            - build/artifacts/jest
        reports:
            junit: build/artifacts/jest/administration.junit.xml
            cobertura: build/artifacts/jest/cobertura-coverage.xml

Jest (Storefront):
    stage: unit
    needs: []
    services:
        -   name: mariadb:10.3
            alias: database
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::all.*/'
        - changes:
            - 'src/Storefront/Resources/app/storefront/**/*'
    script:
        - npm --prefix "$STOREFRONT_PATH" run unit -- --silent
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        when: always
        paths:
            - build/artifacts/jest
        reports:
            junit: build/artifacts/jest/storefront.junit.xml
            cobertura: build/artifacts/jest/cobertura-coverage.xml

# Stage: E2E

.percy_integration:
    services:
        -   name: mariadb:10.3
            alias: database
    variables:
        PERCY_ENABLE: $CYPRESS_PERCY_USAGE
        CYPRESS_localUsage: 'true'
        CYPRESS_usePercy: $CYPRESS_PERCY_USAGE
        CYPRESS_baseUrl: "http://localhost:8000"
        CYPRESS_numTestsKeptInMemory: 0
        APP_ENV: e2e
        CYPRESS_screenshotsFolder: $CI_PROJECT_DIR/var/log/screenshots
    script:
        - composer run init:e2e:admin
        - composer run e2e:prepare
        - composer run e2e:admin:percy -- exec -- cypress run
            --browser chrome
            --spec "cypress/**/visual.spec.js,cypress/**/percy-storefront-validation/*"
            --headless
    after_script:
        - mkdir $CI_PROJECT_DIR/var/log/e2e
        - mv $ADMIN_PATH/test/e2e/cypress/results/*.xml var/log/e2e/ || true
        - mv $STOREFRONT_PATH/test/e2e/cypress/results/*.xml var/log/e2e/ || true
    artifacts:
        when: always
        paths:
            - var/log/*
        reports:
            junit: var/log/e2e/*.xml

E2E:
    stage: E2E
    needs: []
    dependencies: []
    timeout: 2h 00m
    services:
        -   name: mariadb:10.3
            alias: database
    variables:
        APP_ENV: e2e
        CYPRESS_baseUrl: "http://localhost:8000"
        CYPRESS_localUsage: 1
        CYPRESS_screenshotsFolder: $CI_PROJECT_DIR/var/log/screenshots
        # TODO: fix tests that don't work with cache enabled
        SHOPWARE_HTTP_CACHE_ENABLED: 0
    script:
        - composer run init:e2e:$E2E_PROJECT
        - composer run e2e:prepare
        - composer run e2e:$E2E_PROJECT:cypress -- run
            --browser chrome
            --spec "$TEST_DIRECTORY"
            --headless
    after_script:
        - mkdir $CI_PROJECT_DIR/var/log/e2e
        - mv $ADMIN_PATH/test/e2e/cypress/results/*.xml var/log/e2e/ || true
        - mv $STOREFRONT_PATH/test/e2e/cypress/results/*.xml var/log/e2e/ || true
    artifacts:
        when: always
        paths:
            - var/log/*
        reports:
            junit: var/log/e2e/*.xml
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*E2E::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*E2E::all.*/'
        - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "pipeline"'
        - if: '$SKIP_ON_MR != "true" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH =~ /^(trunk|6\..+)$/)'
    parallel:
        matrix:
            # all test cases in chrome except major are executed on each MR
            -   E2E_PROJECT: 'storefront'
                TEST_DIRECTORY: "cypress/integration/**/**/*"
                BROWSER: 'chrome'
                FEATURE_ALL: ["false", "minor"]
                cypress_usePercy: 'false'
            -   E2E_PROJECT: 'admin'
                TEST_DIRECTORY:
                    - "cypress/integration/content/**/*,cypress/integration/catalogue/**/*,cypress/integration/customer/**/*,cypress/integration/media-marketing/**/*"
                    - "cypress/integration/general/**/*,cypress/integration/order/**/*,cypress/integration/rule-product-stream/**/*,cypress/integration/settings/**/*"
                BROWSER: 'chrome'
                FEATURE_ALL: ["false", "minor"]
                cypress_usePercy: 'false'
            # major
            -   E2E_PROJECT: 'storefront'
                TEST_DIRECTORY: "cypress/integration/**/**/*"
                BROWSER: 'chrome'
                FEATURE_ALL: "major"
                cypress_usePercy: 'false'
                SKIP_ON_MR: 'true'
            -   E2E_PROJECT: 'admin'
                TEST_DIRECTORY:
                    - "cypress/integration/content/**/*,cypress/integration/catalogue/**/*,cypress/integration/customer/**/*,cypress/integration/media-marketing/**/*"
                    - "cypress/integration/general/**/*,cypress/integration/order/**/*,cypress/integration/rule-product-stream/**/*,cypress/integration/settings/**/*"
                BROWSER: 'chrome'
                FEATURE_ALL: "major"
                cypress_usePercy: 'false'
                SKIP_ON_MR: 'true'
            # firefox
            -   E2E_PROJECT: 'storefront'
                TEST_DIRECTORY: "cypress/integration/**/**/*"
                BROWSER: 'firefox'
                FEATURE_ALL: 'false'
                cypress_usePercy: 'false'
                SKIP_ON_MR: 'true'
            -   E2E_PROJECT: 'admin'
                TEST_DIRECTORY:
                    - "cypress/integration/content/**/*,cypress/integration/catalogue/**/*,cypress/integration/customer/**/*,cypress/integration/media-marketing/**/*"
                    - "cypress/integration/general/**/*,cypress/integration/order/**/*,cypress/integration/rule-product-stream/**/*,cypress/integration/settings/**/*"
                BROWSER: 'firefox'
                FEATURE_ALL: 'false'
                cypress_usePercy: 'false'
                SKIP_ON_MR: 'true'

Visual Testing (Percy):
    extends: .percy_integration
    stage: E2E
    rules:
        - if: '$PERCY_TOKEN == null || $CYPRESS_PERCY_USAGE == null'
          when: never
        - if: '$CI_PIPELINE_SOURCE == "schedule"'

Symfony security check:
    stage: security
    needs: []
    image: shopware/development:7.4-composer-2
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*security::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*security::all.*/'
        - when: always
    before_script: []
    script:
        - composer install --no-interaction --no-scripts
        - curl --location --output local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v1.0.0/local-php-security-checker_1.0.0_linux_amd64
        - echo 'e5b12488ca78bc07c149e9352278bf10667b88a8461caac10154f9a6f5476369  local-php-security-checker' > local-php-security-checker.sha256
        - sha256sum --check local-php-security-checker.sha256
        - chmod +x local-php-security-checker
        - ./local-php-security-checker
        - composer install --no-interaction --no-scripts -d src/Recovery
        - ./local-php-security-checker --path=src/Recovery

NPM security check:
    stage: security
    image: shopware/development:7.4-composer-2
    dependencies: []
    allow_failure: true
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*security::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*security::all.*/'
        - when: manual
    before_script: []
    script:
        - cd src/Administration/Resources/app/administration
        - npm i
        - npm install --save-dev audit-ci
        - node node_modules/.bin/audit-ci --moderate --allowlist http-proxy elliptic
        - cd ../../../../../src/Storefront/Resources/app/storefront
        - npm i
        - npm install --save-dev audit-ci
        - node node_modules/.bin/audit-ci --moderate --allowlist dot-prop http-proxy acorn jquery elliptic

sonarqube-check:
    stage: security
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: [""]
    before_script: []
    dependencies: []
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
        GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*security::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*security::all.*/'
        - when: manual
        - if: '$CI_COMMIT_BRANCH == "trunk"'
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    allow_failure: true
    script:
        - sonar-scanner
    artifacts:
        when: always
        paths:
            - cobertura.xml
            - development/build/artifacts/phpunit.junit.xml

# Stage: build

Component Library:
    stage: build
    image: node:10.8
    before_script: []
    dependencies: []
    variables:
        PROJECT_ROOT: $CI_PROJECT_DIR
    environment:
        name: Component Library
        url: https://component-library.shopware.com
    rules:
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*build::skip.*/'
          when: never
        - if: '$CI_MERGE_REQUEST_LABELS =~ /.*build::all.*/'
        - changes:
            - src/Administration/**/*
            - src/Storefront/**/*
    script:
        - npm install --prefix src/Administration/Resources/app/administration
        - npm install --prefix src/Administration/Resources/app/administration/build/nuxt-component-library/
        - npm run --prefix src/Administration/Resources/app/administration/build/nuxt-component-library/ generate
        - "[[ -d build/artifacts/component-library/ ]] && (ls -1qA build/artifacts/component-library/ | grep -q .)"
    artifacts:
        paths:
            - build/artifacts/component-library/

# Stage: deploy

Upload Component Library:
    stage: deploy
    image: python:latest
    before_script: []
    rules:
        - if: '$CI_COMMIT_BRANCH == "trunk" && $CI_PIPELINE_SOURCE == "schedule"'
    dependencies:
        - Component Library
    script:
        - pip install awscli
        - cd build/artifacts/component-library
        - aws s3 sync --delete --acl public-read . s3://shopware-ui-component-library-docs/
        - aws cloudfront create-invalidation --distribution-id E18U17118IAC82 --paths "/*"
    interruptible: false

# Stage: visual

Percy:
    extends: .percy_integration
    stage: visual
    rules:
        -   if: '$PERCY_TOKEN == null || $CYPRESS_PERCY_USAGE == null'
            when: never
        -   if: '$CI_MERGE_REQUEST_LABELS =~ /.*E2E::skip.*/'
            when: never
        -   if: '$CI_PIPELINE_SOURCE == "pipeline"'
        -   if: '$CI_MERGE_REQUEST_LABELS =~ /.*E2E::all.*/'
        -   if: '$CI_MERGE_REQUEST_LABELS =~ /.*E2E::visual.*/'
        -   if: '$CI_PIPELINE_SOURCE == "pipeline"'
